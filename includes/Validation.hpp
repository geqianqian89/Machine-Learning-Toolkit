#ifndef VALIDATION__HPP
#define VALIDATION__HPP

#include "Classifier.hpp"
#include "Data.hpp"
#include "ValidationSolution.hpp"

/**
 * \brief Class of methods for the validation of ML algorithms.
 */
class Validation {
    // Attributes
private :
    /// Model to be validated.
    Classifier *classifier;
    /// Sample used in the validation.
    Data *sample;
    /// Train and test sample used.
    Data train_sample, test_sample;
    double initial_error, limit_error, actual_error;
    /// Parameter used in the kernel in case of Dual classifiers.
    double kernel_param;
    /// Type of the kernel in case of Dual classifiers.
    int kernel_type;
    int verbose = 0;
    unsigned int seed;
    /// Solution generated by the validation.
    ValidationSolution solution;
    // Operations
public :
    /**
     * \brief Default constructor.
     */
    Validation () {};
    /**
     * @brief Constructor initializing the sample and classifier used.
     * @param sample Sample to be used in the validation.
     * @param classifier Model to be validated.
     * @param seed  Seed to feed the pseudo random number generator.
     */
    explicit Validation (Data *sample, Classifier *classifier = NULL, unsigned int seed = 666);
    /**
     * \brief Executes the Stratified K-fold algorithm
     * \param fold Number of folds.
     */
    void partTrainTest(int fold);
    /**
     * \brief Executes the k
     * \param fold Number of folds.
     * \param seed  Seed to feed the pseudo random number generator.
     */
    double kFold (int fold, int seed);
    /**
     * @brief Executes the validation with several executions of the k fold algorithm
     * @param fold Number of folds.
     * @param qtde Number of executions.
     * @return double Validation error.
     */
    double validation (int fold, int qtde);
    /**
     * @brief Get the train sample used in the validation of the model.
     * @return Data
     */
    Data getTestSample ();
    /**
     * @brief Get the train sample used in the validation of the model.
     * @return Data
     */
    Data getTrainSample ();

    void setVerbose(int verbose){this->verbose = verbose;}
};

#endif
